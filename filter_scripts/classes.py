#!/usr/bin/env python
# -*- coding: utf-8 -*
'''
2019/11/25
This file contains all the classes used in the project.
version: 1.0
Auther: Yuancong Wang
'''

import os
import pandas as pd


class EDigestionDir(object):
    '''
    This class represents the dir path containing the files generated by enzyme digestion module.
    '''

    def __init__(self, dir_path_e_digestion):
        self.dir_path_e_digestion = dir_path_e_digestion
        self.sam_files = list()

    def mk_res_dir(self):
        '''
        make a dir under the current dir path, if the dir named 'results/' not exists
        :return: the dir path that is generated in this method.
        '''

        res_dir = os.path.join(self.dir_path_e_digestion, 'results/')

        if not os.path.exists(res_dir):
            os.mkdir(res_dir)
        else:
            print('The dir path already exists.')

        return res_dir

    def get_the_sam_files(self):
        '''
        Obtain all the sorted sam files in the designated directory.
        :return: A list containing the Absolute paths of all the sam files
        '''

        all_files = os.listdir(self.dir_path_e_digestion)

        for file in all_files:

            file_path = os.path.join(self.dir_path_e_digestion, file)

            if file.endswith('sort.sam'):
                self.sam_files.append(file_path)

        if self.sam_files:
            return self.sam_files
        else:
            print('There is no sorted sam file in the directory')


class SamFile(object):
    '''
    This class defines the sam files that are used in this project. This class is inherited from TextFile class.
    The sam file must been sorted by 'samtools'. Its name must ends with '.sort.sam'.

    format of sam files:
    (head)
    @HD	VN:1.0	SO:coordinate
    @SQ	SN:scaffold_68	LN:105
    @SQ	SN:scaffold_140	LN:109
    @SQ	SN:scaffold_427	LN:110
    @SQ	SN:scaffold_236	LN:114
    (info)
    scaffold_498-11	0	scaffold_498	36624	6	347M	*	0	0	ATCAAATT	IIIIII	AS:i:0	XS:i:-8	XN:i:0	XM:i:0	XO:i:0	XG:i:0	NM:i:0	MD:Z:347	YT:Z:UU
    chr1-30060	16	scaffold_509	83839	1	316M	*	0	0	ATCCCCCA	IIIIII	AS:i:0	XS:i:0	XN:i:0	XM:i:0	XO:i:0	XG:i:0	NM:i:0	MD:Z:316	YT:Z:UU
    chrMt-131	0	chrMt	314788	1	331M	*	0	0	CGACGA	IIIIII	AS:i:0	XS:i:0	XN:i:0	XM:i:0	XO:i:0	XG:i:0	NM:i:0	MD:Z:331	YT:Z:UU
    '''

    def __init__(self, file_path):

        self.file_path = file_path
        self.dir_path = os.path.dirname(self.file_path)
        self.file_name = os.path.basename(self.file_path)

        self.unique_sam_name = self.file_name[0:-4] + '_unique.sam'
        self.unique_range_sam_name = self.unique_sam_name[0:-4] + '_range.sam'

    def get_unique_reads_range(self, res_dir):
        '''
        input the sam file path
        check every reads, dump the reads that are mapped to multiple locations on the reference genome.
        :return: sam file with unique reads only
        '''

        # get the path of unique sam file containing unique reads only
        unique_sam_path = os.path.join(res_dir, self.unique_sam_name)

        with open(self.file_path, 'r') as f:

            # delete the file if the unique sam file exists
            if os.path.exists(unique_sam_path):
                print('The target file exists.')

                print('The target file is removed.')

                os.remove(unique_sam_path)

            # write the unique reads in the sam file to the new file (.sort_unique.sam)
            with open(unique_sam_path, 'a') as f_unique:

                for line in f.readlines():

                    if (line[0].isdigit() or line[0:3] == 'chr'):

                        if ('XS:i' not in line and '@' not in line):
                            f_unique.writelines(line)

        # get the path of unique sam file containing unique reads with the range of their location in the ref genome
        sam_range_path = os.path.join(res_dir, self.unique_range_sam_name)

        if os.path.exists(sam_range_path):
            os.remove(sam_range_path)
            print('The range target file exists.')
            print('The range target file has been removed.')

        with open(unique_sam_path, 'r') as f:
            contents = f.readlines()
            num_lines = len(contents)

        with open(sam_range_path, 'a') as f_range:

            for i in range(num_lines):
                read = contents[i].split('\t')

                # 获得比对的起始位点
                read_pos = read[3]

                # 获得read长度
                read_len = len(read[9])

                # 比对read 终止位点为 起始位点 + 长度
                read_end_pos = int(read_pos) + int(read_len)

                content_range = (contents[i].strip('\n') + '\t' + str(read_end_pos))

                # 写入终止位点
                f_range.writelines(content_range + '\n')

        return sam_range_path


class HapFile(object):
    '''
    This class represents the file containing the information of polymorphism, according to the hapmap file
    '''

    def __init__(self, sam_range_file_path, hap_path):

        # get the current dir and the name of the sam file
        self.sam_range_file_path = sam_range_file_path
        self.dir_path = os.path.dirname(self.sam_range_file_path)
        self.sam_range_file_name = os.path.basename(self.sam_range_file_path)

        # get the information of hapmap file
        self.hap_path = hap_path
        self.hap_dir = os.path.dirname(self.hap_path)
        self.hap_file_name = os.path.basename(self.hap_path)
        self.hap_reduced_name = self.hap_file_name[0:-4] + '_redu.hmp'
        self.hap_reduced_path = os.path.join(self.hap_dir, self.hap_file_name)


        self.sam_hap_name = self.sam_range_file_name[0: -4] + '_hap.sam'
        self.sam_hap_path = os.path.join(self.dir_path, self.sam_hap_name)

    def get_reduce_hap(self):
        '''
        if the users use the their own hapmap file, the program will only preserve the essential information (the
        position of the polimorphism, the first four columns) in the reduced hapmap file
        :return:
        '''

        if not os.path.exists(self.hap_reduced_path):
            with open(self.hap_path, 'r') as f_hap:
                with open(self.hap_reduced_path, 'a') as f_red:
                    for line in f_hap.readlines():
                        content = line.split('\t')[0:4]
                        content = '\t'.join(content)
                        f_red.writelines(content)

        return self.hap_reduced_path

    def get_reduced_default_file(self, pic_val):
        '''
        if the user use the default polymorphism file provied, filter the records according to the pic_val, only the
        pic value larger than that is provided will be preserved in the reduced hap file
        :param pic_val: the pic value, setted by the user, default is 0.3
        :return: self.hap_reduced_path

        demo:
        CHROM POS N_ALLELES N_CHR 1
        chr10 269 2 492 0.377025
        chr10 283 2 504 0.0871049
        chr10 284 2 506 0.0649365
        chr10 285 2 506 0.0831753


        '''
        if not os.path.exists(self.hap_reduced_path):
            col_names = ['chrom', 'pos', 'n_alleles', 'loc', 'pic_val']
            all_pic = pd.read_csv(self.hap_path, sep='\t', names=col_names)
            sel_pic = all_pic.pic_val >= pic_val

























